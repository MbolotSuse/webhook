// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/webhook/pkg/generated/controllers/management.cattle.io/v3 (interfaces: GlobalRoleController,GlobalRoleClient,GlobalRoleCache)

// Package fakes is a generated GoMock package.
package fakes

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	v30 "github.com/rancher/webhook/pkg/generated/controllers/management.cattle.io/v3"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// MockGlobalRoleController is a mock of GlobalRoleController interface.
type MockGlobalRoleController struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalRoleControllerMockRecorder
}

// MockGlobalRoleControllerMockRecorder is the mock recorder for MockGlobalRoleController.
type MockGlobalRoleControllerMockRecorder struct {
	mock *MockGlobalRoleController
}

// NewMockGlobalRoleController creates a new mock instance.
func NewMockGlobalRoleController(ctrl *gomock.Controller) *MockGlobalRoleController {
	mock := &MockGlobalRoleController{ctrl: ctrl}
	mock.recorder = &MockGlobalRoleControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalRoleController) EXPECT() *MockGlobalRoleControllerMockRecorder {
	return m.recorder
}

// AddGenericHandler mocks base method.
func (m *MockGlobalRoleController) AddGenericHandler(arg0 context.Context, arg1 string, arg2 generic.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddGenericHandler", arg0, arg1, arg2)
}

// AddGenericHandler indicates an expected call of AddGenericHandler.
func (mr *MockGlobalRoleControllerMockRecorder) AddGenericHandler(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGenericHandler", reflect.TypeOf((*MockGlobalRoleController)(nil).AddGenericHandler), arg0, arg1, arg2)
}

// AddGenericRemoveHandler mocks base method.
func (m *MockGlobalRoleController) AddGenericRemoveHandler(arg0 context.Context, arg1 string, arg2 generic.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddGenericRemoveHandler", arg0, arg1, arg2)
}

// AddGenericRemoveHandler indicates an expected call of AddGenericRemoveHandler.
func (mr *MockGlobalRoleControllerMockRecorder) AddGenericRemoveHandler(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGenericRemoveHandler", reflect.TypeOf((*MockGlobalRoleController)(nil).AddGenericRemoveHandler), arg0, arg1, arg2)
}

// Cache mocks base method.
func (m *MockGlobalRoleController) Cache() v30.GlobalRoleCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cache")
	ret0, _ := ret[0].(v30.GlobalRoleCache)
	return ret0
}

// Cache indicates an expected call of Cache.
func (mr *MockGlobalRoleControllerMockRecorder) Cache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockGlobalRoleController)(nil).Cache))
}

// Create mocks base method.
func (m *MockGlobalRoleController) Create(arg0 *v3.GlobalRole) (*v3.GlobalRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*v3.GlobalRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGlobalRoleControllerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGlobalRoleController)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockGlobalRoleController) Delete(arg0 string, arg1 *v1.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGlobalRoleControllerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGlobalRoleController)(nil).Delete), arg0, arg1)
}

// Enqueue mocks base method.
func (m *MockGlobalRoleController) Enqueue(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Enqueue", arg0)
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockGlobalRoleControllerMockRecorder) Enqueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockGlobalRoleController)(nil).Enqueue), arg0)
}

// EnqueueAfter mocks base method.
func (m *MockGlobalRoleController) EnqueueAfter(arg0 string, arg1 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnqueueAfter", arg0, arg1)
}

// EnqueueAfter indicates an expected call of EnqueueAfter.
func (mr *MockGlobalRoleControllerMockRecorder) EnqueueAfter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueAfter", reflect.TypeOf((*MockGlobalRoleController)(nil).EnqueueAfter), arg0, arg1)
}

// Get mocks base method.
func (m *MockGlobalRoleController) Get(arg0 string, arg1 v1.GetOptions) (*v3.GlobalRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v3.GlobalRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGlobalRoleControllerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGlobalRoleController)(nil).Get), arg0, arg1)
}

// GroupVersionKind mocks base method.
func (m *MockGlobalRoleController) GroupVersionKind() schema.GroupVersionKind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupVersionKind")
	ret0, _ := ret[0].(schema.GroupVersionKind)
	return ret0
}

// GroupVersionKind indicates an expected call of GroupVersionKind.
func (mr *MockGlobalRoleControllerMockRecorder) GroupVersionKind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupVersionKind", reflect.TypeOf((*MockGlobalRoleController)(nil).GroupVersionKind))
}

// Informer mocks base method.
func (m *MockGlobalRoleController) Informer() cache.SharedIndexInformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Informer")
	ret0, _ := ret[0].(cache.SharedIndexInformer)
	return ret0
}

// Informer indicates an expected call of Informer.
func (mr *MockGlobalRoleControllerMockRecorder) Informer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Informer", reflect.TypeOf((*MockGlobalRoleController)(nil).Informer))
}

// List mocks base method.
func (m *MockGlobalRoleController) List(arg0 v1.ListOptions) (*v3.GlobalRoleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(*v3.GlobalRoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGlobalRoleControllerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGlobalRoleController)(nil).List), arg0)
}

// OnChange mocks base method.
func (m *MockGlobalRoleController) OnChange(arg0 context.Context, arg1 string, arg2 v30.GlobalRoleHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnChange", arg0, arg1, arg2)
}

// OnChange indicates an expected call of OnChange.
func (mr *MockGlobalRoleControllerMockRecorder) OnChange(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChange", reflect.TypeOf((*MockGlobalRoleController)(nil).OnChange), arg0, arg1, arg2)
}

// OnRemove mocks base method.
func (m *MockGlobalRoleController) OnRemove(arg0 context.Context, arg1 string, arg2 v30.GlobalRoleHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnRemove", arg0, arg1, arg2)
}

// OnRemove indicates an expected call of OnRemove.
func (mr *MockGlobalRoleControllerMockRecorder) OnRemove(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRemove", reflect.TypeOf((*MockGlobalRoleController)(nil).OnRemove), arg0, arg1, arg2)
}

// Patch mocks base method.
func (m *MockGlobalRoleController) Patch(arg0 string, arg1 types.PatchType, arg2 []byte, arg3 ...string) (*v3.GlobalRole, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v3.GlobalRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockGlobalRoleControllerMockRecorder) Patch(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockGlobalRoleController)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockGlobalRoleController) Update(arg0 *v3.GlobalRole) (*v3.GlobalRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v3.GlobalRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGlobalRoleControllerMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGlobalRoleController)(nil).Update), arg0)
}

// Updater mocks base method.
func (m *MockGlobalRoleController) Updater() generic.Updater {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updater")
	ret0, _ := ret[0].(generic.Updater)
	return ret0
}

// Updater indicates an expected call of Updater.
func (mr *MockGlobalRoleControllerMockRecorder) Updater() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updater", reflect.TypeOf((*MockGlobalRoleController)(nil).Updater))
}

// Watch mocks base method.
func (m *MockGlobalRoleController) Watch(arg0 v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockGlobalRoleControllerMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockGlobalRoleController)(nil).Watch), arg0)
}

// MockGlobalRoleClient is a mock of GlobalRoleClient interface.
type MockGlobalRoleClient struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalRoleClientMockRecorder
}

// MockGlobalRoleClientMockRecorder is the mock recorder for MockGlobalRoleClient.
type MockGlobalRoleClientMockRecorder struct {
	mock *MockGlobalRoleClient
}

// NewMockGlobalRoleClient creates a new mock instance.
func NewMockGlobalRoleClient(ctrl *gomock.Controller) *MockGlobalRoleClient {
	mock := &MockGlobalRoleClient{ctrl: ctrl}
	mock.recorder = &MockGlobalRoleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalRoleClient) EXPECT() *MockGlobalRoleClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGlobalRoleClient) Create(arg0 *v3.GlobalRole) (*v3.GlobalRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*v3.GlobalRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGlobalRoleClientMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGlobalRoleClient)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockGlobalRoleClient) Delete(arg0 string, arg1 *v1.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGlobalRoleClientMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGlobalRoleClient)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockGlobalRoleClient) Get(arg0 string, arg1 v1.GetOptions) (*v3.GlobalRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v3.GlobalRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGlobalRoleClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGlobalRoleClient)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockGlobalRoleClient) List(arg0 v1.ListOptions) (*v3.GlobalRoleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(*v3.GlobalRoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGlobalRoleClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGlobalRoleClient)(nil).List), arg0)
}

// Patch mocks base method.
func (m *MockGlobalRoleClient) Patch(arg0 string, arg1 types.PatchType, arg2 []byte, arg3 ...string) (*v3.GlobalRole, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v3.GlobalRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockGlobalRoleClientMockRecorder) Patch(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockGlobalRoleClient)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockGlobalRoleClient) Update(arg0 *v3.GlobalRole) (*v3.GlobalRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v3.GlobalRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGlobalRoleClientMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGlobalRoleClient)(nil).Update), arg0)
}

// Watch mocks base method.
func (m *MockGlobalRoleClient) Watch(arg0 v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockGlobalRoleClientMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockGlobalRoleClient)(nil).Watch), arg0)
}

// MockGlobalRoleCache is a mock of GlobalRoleCache interface.
type MockGlobalRoleCache struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalRoleCacheMockRecorder
}

// MockGlobalRoleCacheMockRecorder is the mock recorder for MockGlobalRoleCache.
type MockGlobalRoleCacheMockRecorder struct {
	mock *MockGlobalRoleCache
}

// NewMockGlobalRoleCache creates a new mock instance.
func NewMockGlobalRoleCache(ctrl *gomock.Controller) *MockGlobalRoleCache {
	mock := &MockGlobalRoleCache{ctrl: ctrl}
	mock.recorder = &MockGlobalRoleCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalRoleCache) EXPECT() *MockGlobalRoleCacheMockRecorder {
	return m.recorder
}

// AddIndexer mocks base method.
func (m *MockGlobalRoleCache) AddIndexer(arg0 string, arg1 v30.GlobalRoleIndexer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddIndexer", arg0, arg1)
}

// AddIndexer indicates an expected call of AddIndexer.
func (mr *MockGlobalRoleCacheMockRecorder) AddIndexer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndexer", reflect.TypeOf((*MockGlobalRoleCache)(nil).AddIndexer), arg0, arg1)
}

// Get mocks base method.
func (m *MockGlobalRoleCache) Get(arg0 string) (*v3.GlobalRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v3.GlobalRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGlobalRoleCacheMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGlobalRoleCache)(nil).Get), arg0)
}

// GetByIndex mocks base method.
func (m *MockGlobalRoleCache) GetByIndex(arg0, arg1 string) ([]*v3.GlobalRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIndex", arg0, arg1)
	ret0, _ := ret[0].([]*v3.GlobalRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIndex indicates an expected call of GetByIndex.
func (mr *MockGlobalRoleCacheMockRecorder) GetByIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIndex", reflect.TypeOf((*MockGlobalRoleCache)(nil).GetByIndex), arg0, arg1)
}

// List mocks base method.
func (m *MockGlobalRoleCache) List(arg0 labels.Selector) ([]*v3.GlobalRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v3.GlobalRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGlobalRoleCacheMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGlobalRoleCache)(nil).List), arg0)
}
