// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/wrangler/pkg/generated/controllers/rbac/v1 (interfaces: ClusterRoleCache)

// Package fakes is a generated GoMock package.
package fakes

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/rancher/wrangler/pkg/generated/controllers/rbac/v1"
	v10 "k8s.io/api/rbac/v1"
	labels "k8s.io/apimachinery/pkg/labels"
)

// MockClusterRoleCache is a mock of ClusterRoleCache interface.
type MockClusterRoleCache struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRoleCacheMockRecorder
}

// MockClusterRoleCacheMockRecorder is the mock recorder for MockClusterRoleCache.
type MockClusterRoleCacheMockRecorder struct {
	mock *MockClusterRoleCache
}

// NewMockClusterRoleCache creates a new mock instance.
func NewMockClusterRoleCache(ctrl *gomock.Controller) *MockClusterRoleCache {
	mock := &MockClusterRoleCache{ctrl: ctrl}
	mock.recorder = &MockClusterRoleCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRoleCache) EXPECT() *MockClusterRoleCacheMockRecorder {
	return m.recorder
}

// AddIndexer mocks base method.
func (m *MockClusterRoleCache) AddIndexer(arg0 string, arg1 v1.ClusterRoleIndexer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddIndexer", arg0, arg1)
}

// AddIndexer indicates an expected call of AddIndexer.
func (mr *MockClusterRoleCacheMockRecorder) AddIndexer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndexer", reflect.TypeOf((*MockClusterRoleCache)(nil).AddIndexer), arg0, arg1)
}

// Get mocks base method.
func (m *MockClusterRoleCache) Get(arg0 string) (*v10.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v10.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClusterRoleCacheMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterRoleCache)(nil).Get), arg0)
}

// GetByIndex mocks base method.
func (m *MockClusterRoleCache) GetByIndex(arg0, arg1 string) ([]*v10.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIndex", arg0, arg1)
	ret0, _ := ret[0].([]*v10.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIndex indicates an expected call of GetByIndex.
func (mr *MockClusterRoleCacheMockRecorder) GetByIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIndex", reflect.TypeOf((*MockClusterRoleCache)(nil).GetByIndex), arg0, arg1)
}

// List mocks base method.
func (m *MockClusterRoleCache) List(arg0 labels.Selector) ([]*v10.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v10.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClusterRoleCacheMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterRoleCache)(nil).List), arg0)
}
