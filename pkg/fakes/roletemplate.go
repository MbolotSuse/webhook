// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/webhook/pkg/generated/controllers/management.cattle.io/v3 (interfaces: RoleTemplateController,RoleTemplateClient,RoleTemplateCache)

// Package fakes is a generated GoMock package.
package fakes

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	v30 "github.com/rancher/webhook/pkg/generated/controllers/management.cattle.io/v3"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// MockRoleTemplateController is a mock of RoleTemplateController interface.
type MockRoleTemplateController struct {
	ctrl     *gomock.Controller
	recorder *MockRoleTemplateControllerMockRecorder
}

// MockRoleTemplateControllerMockRecorder is the mock recorder for MockRoleTemplateController.
type MockRoleTemplateControllerMockRecorder struct {
	mock *MockRoleTemplateController
}

// NewMockRoleTemplateController creates a new mock instance.
func NewMockRoleTemplateController(ctrl *gomock.Controller) *MockRoleTemplateController {
	mock := &MockRoleTemplateController{ctrl: ctrl}
	mock.recorder = &MockRoleTemplateControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleTemplateController) EXPECT() *MockRoleTemplateControllerMockRecorder {
	return m.recorder
}

// AddGenericHandler mocks base method.
func (m *MockRoleTemplateController) AddGenericHandler(arg0 context.Context, arg1 string, arg2 generic.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddGenericHandler", arg0, arg1, arg2)
}

// AddGenericHandler indicates an expected call of AddGenericHandler.
func (mr *MockRoleTemplateControllerMockRecorder) AddGenericHandler(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGenericHandler", reflect.TypeOf((*MockRoleTemplateController)(nil).AddGenericHandler), arg0, arg1, arg2)
}

// AddGenericRemoveHandler mocks base method.
func (m *MockRoleTemplateController) AddGenericRemoveHandler(arg0 context.Context, arg1 string, arg2 generic.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddGenericRemoveHandler", arg0, arg1, arg2)
}

// AddGenericRemoveHandler indicates an expected call of AddGenericRemoveHandler.
func (mr *MockRoleTemplateControllerMockRecorder) AddGenericRemoveHandler(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGenericRemoveHandler", reflect.TypeOf((*MockRoleTemplateController)(nil).AddGenericRemoveHandler), arg0, arg1, arg2)
}

// Cache mocks base method.
func (m *MockRoleTemplateController) Cache() v30.RoleTemplateCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cache")
	ret0, _ := ret[0].(v30.RoleTemplateCache)
	return ret0
}

// Cache indicates an expected call of Cache.
func (mr *MockRoleTemplateControllerMockRecorder) Cache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockRoleTemplateController)(nil).Cache))
}

// Create mocks base method.
func (m *MockRoleTemplateController) Create(arg0 *v3.RoleTemplate) (*v3.RoleTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*v3.RoleTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRoleTemplateControllerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleTemplateController)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockRoleTemplateController) Delete(arg0 string, arg1 *v1.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleTemplateControllerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleTemplateController)(nil).Delete), arg0, arg1)
}

// Enqueue mocks base method.
func (m *MockRoleTemplateController) Enqueue(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Enqueue", arg0)
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockRoleTemplateControllerMockRecorder) Enqueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockRoleTemplateController)(nil).Enqueue), arg0)
}

// EnqueueAfter mocks base method.
func (m *MockRoleTemplateController) EnqueueAfter(arg0 string, arg1 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnqueueAfter", arg0, arg1)
}

// EnqueueAfter indicates an expected call of EnqueueAfter.
func (mr *MockRoleTemplateControllerMockRecorder) EnqueueAfter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueAfter", reflect.TypeOf((*MockRoleTemplateController)(nil).EnqueueAfter), arg0, arg1)
}

// Get mocks base method.
func (m *MockRoleTemplateController) Get(arg0 string, arg1 v1.GetOptions) (*v3.RoleTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v3.RoleTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoleTemplateControllerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoleTemplateController)(nil).Get), arg0, arg1)
}

// GroupVersionKind mocks base method.
func (m *MockRoleTemplateController) GroupVersionKind() schema.GroupVersionKind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupVersionKind")
	ret0, _ := ret[0].(schema.GroupVersionKind)
	return ret0
}

// GroupVersionKind indicates an expected call of GroupVersionKind.
func (mr *MockRoleTemplateControllerMockRecorder) GroupVersionKind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupVersionKind", reflect.TypeOf((*MockRoleTemplateController)(nil).GroupVersionKind))
}

// Informer mocks base method.
func (m *MockRoleTemplateController) Informer() cache.SharedIndexInformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Informer")
	ret0, _ := ret[0].(cache.SharedIndexInformer)
	return ret0
}

// Informer indicates an expected call of Informer.
func (mr *MockRoleTemplateControllerMockRecorder) Informer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Informer", reflect.TypeOf((*MockRoleTemplateController)(nil).Informer))
}

// List mocks base method.
func (m *MockRoleTemplateController) List(arg0 v1.ListOptions) (*v3.RoleTemplateList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(*v3.RoleTemplateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoleTemplateControllerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleTemplateController)(nil).List), arg0)
}

// OnChange mocks base method.
func (m *MockRoleTemplateController) OnChange(arg0 context.Context, arg1 string, arg2 v30.RoleTemplateHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnChange", arg0, arg1, arg2)
}

// OnChange indicates an expected call of OnChange.
func (mr *MockRoleTemplateControllerMockRecorder) OnChange(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChange", reflect.TypeOf((*MockRoleTemplateController)(nil).OnChange), arg0, arg1, arg2)
}

// OnRemove mocks base method.
func (m *MockRoleTemplateController) OnRemove(arg0 context.Context, arg1 string, arg2 v30.RoleTemplateHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnRemove", arg0, arg1, arg2)
}

// OnRemove indicates an expected call of OnRemove.
func (mr *MockRoleTemplateControllerMockRecorder) OnRemove(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRemove", reflect.TypeOf((*MockRoleTemplateController)(nil).OnRemove), arg0, arg1, arg2)
}

// Patch mocks base method.
func (m *MockRoleTemplateController) Patch(arg0 string, arg1 types.PatchType, arg2 []byte, arg3 ...string) (*v3.RoleTemplate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v3.RoleTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockRoleTemplateControllerMockRecorder) Patch(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockRoleTemplateController)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockRoleTemplateController) Update(arg0 *v3.RoleTemplate) (*v3.RoleTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v3.RoleTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRoleTemplateControllerMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoleTemplateController)(nil).Update), arg0)
}

// Updater mocks base method.
func (m *MockRoleTemplateController) Updater() generic.Updater {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updater")
	ret0, _ := ret[0].(generic.Updater)
	return ret0
}

// Updater indicates an expected call of Updater.
func (mr *MockRoleTemplateControllerMockRecorder) Updater() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updater", reflect.TypeOf((*MockRoleTemplateController)(nil).Updater))
}

// Watch mocks base method.
func (m *MockRoleTemplateController) Watch(arg0 v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockRoleTemplateControllerMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockRoleTemplateController)(nil).Watch), arg0)
}

// MockRoleTemplateClient is a mock of RoleTemplateClient interface.
type MockRoleTemplateClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoleTemplateClientMockRecorder
}

// MockRoleTemplateClientMockRecorder is the mock recorder for MockRoleTemplateClient.
type MockRoleTemplateClientMockRecorder struct {
	mock *MockRoleTemplateClient
}

// NewMockRoleTemplateClient creates a new mock instance.
func NewMockRoleTemplateClient(ctrl *gomock.Controller) *MockRoleTemplateClient {
	mock := &MockRoleTemplateClient{ctrl: ctrl}
	mock.recorder = &MockRoleTemplateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleTemplateClient) EXPECT() *MockRoleTemplateClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoleTemplateClient) Create(arg0 *v3.RoleTemplate) (*v3.RoleTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*v3.RoleTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRoleTemplateClientMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleTemplateClient)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockRoleTemplateClient) Delete(arg0 string, arg1 *v1.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleTemplateClientMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleTemplateClient)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockRoleTemplateClient) Get(arg0 string, arg1 v1.GetOptions) (*v3.RoleTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v3.RoleTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoleTemplateClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoleTemplateClient)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockRoleTemplateClient) List(arg0 v1.ListOptions) (*v3.RoleTemplateList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(*v3.RoleTemplateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoleTemplateClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleTemplateClient)(nil).List), arg0)
}

// Patch mocks base method.
func (m *MockRoleTemplateClient) Patch(arg0 string, arg1 types.PatchType, arg2 []byte, arg3 ...string) (*v3.RoleTemplate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v3.RoleTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockRoleTemplateClientMockRecorder) Patch(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockRoleTemplateClient)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockRoleTemplateClient) Update(arg0 *v3.RoleTemplate) (*v3.RoleTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v3.RoleTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRoleTemplateClientMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoleTemplateClient)(nil).Update), arg0)
}

// Watch mocks base method.
func (m *MockRoleTemplateClient) Watch(arg0 v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockRoleTemplateClientMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockRoleTemplateClient)(nil).Watch), arg0)
}

// MockRoleTemplateCache is a mock of RoleTemplateCache interface.
type MockRoleTemplateCache struct {
	ctrl     *gomock.Controller
	recorder *MockRoleTemplateCacheMockRecorder
}

// MockRoleTemplateCacheMockRecorder is the mock recorder for MockRoleTemplateCache.
type MockRoleTemplateCacheMockRecorder struct {
	mock *MockRoleTemplateCache
}

// NewMockRoleTemplateCache creates a new mock instance.
func NewMockRoleTemplateCache(ctrl *gomock.Controller) *MockRoleTemplateCache {
	mock := &MockRoleTemplateCache{ctrl: ctrl}
	mock.recorder = &MockRoleTemplateCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleTemplateCache) EXPECT() *MockRoleTemplateCacheMockRecorder {
	return m.recorder
}

// AddIndexer mocks base method.
func (m *MockRoleTemplateCache) AddIndexer(arg0 string, arg1 v30.RoleTemplateIndexer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddIndexer", arg0, arg1)
}

// AddIndexer indicates an expected call of AddIndexer.
func (mr *MockRoleTemplateCacheMockRecorder) AddIndexer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndexer", reflect.TypeOf((*MockRoleTemplateCache)(nil).AddIndexer), arg0, arg1)
}

// Get mocks base method.
func (m *MockRoleTemplateCache) Get(arg0 string) (*v3.RoleTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v3.RoleTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoleTemplateCacheMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoleTemplateCache)(nil).Get), arg0)
}

// GetByIndex mocks base method.
func (m *MockRoleTemplateCache) GetByIndex(arg0, arg1 string) ([]*v3.RoleTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIndex", arg0, arg1)
	ret0, _ := ret[0].([]*v3.RoleTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIndex indicates an expected call of GetByIndex.
func (mr *MockRoleTemplateCacheMockRecorder) GetByIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIndex", reflect.TypeOf((*MockRoleTemplateCache)(nil).GetByIndex), arg0, arg1)
}

// List mocks base method.
func (m *MockRoleTemplateCache) List(arg0 labels.Selector) ([]*v3.RoleTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v3.RoleTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoleTemplateCacheMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleTemplateCache)(nil).List), arg0)
}
